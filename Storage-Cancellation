#[pallet::event]
#[pallet::metadata(T::AccountId = "AccountId")]
#[pallet::generate_deposite(pub(super)fn deposite_event)]
pub enum Event<T: Config>{
    ClaimRevoked(T::AccountId, Vec<u8>),
}

#[pallet::error]
pub enum Error<T>{
    ProofAlreadyExist,
    ClaimNotExist,
    NotClaimOwner,
}




#[pallet::weight(0)]

pub fn revoke_claim(
    origin:OriginFor<T>,
    claim:Ve<u8> 
    ) -> DispatchResultWithPostInfo{
    let sender = ensure_signed(origin)?;
    let (owner,_) = Proofs::<T>::get(&claim).ok_or(Error::<T>::ClaimNotExist)?;
    //校验当前交易的发送方是不是proof的owner，如果是的话，才允许吊销，如果不是，则不能吊销
    ensure!(owner==sender,Error::<T>::NotClaimOwner);
    //昨晚验证后才能删除
    Proofs::<T>::remove(&claim);
    
    Self::deposit_event(Event::ClaimRevoked(sender,claim));
    Ok(().into())
    }
